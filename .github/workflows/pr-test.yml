name: PR Test and Coverage

on:
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - main
      - develop

permissions:
  contents: read
  checks: write
  pull-requests: write
  statuses: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        module:
          - spring-batch-querydsl-kotlin-reader
          - spring-batch-querydsl-kotlin-sample
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests for ${{ matrix.module }}
        run: ./gradlew :${{ matrix.module }}:test --parallel --build-cache --continue

      - name: Generate JaCoCo coverage report
        if: always()
        run: ./gradlew :${{ matrix.module }}:jacocoTestReport

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.module }}
          path: |
            ${{ matrix.module }}/build/reports/tests/test/
            ${{ matrix.module }}/build/test-results/test/
          retention-days: 30

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ matrix.module }}
          path: |
            ${{ matrix.module }}/build/reports/jacoco/test/
          retention-days: 30

      - name: Publish test results summary
        if: always()
        run: |
          echo "## Test Results: ${{ matrix.module }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -d "${{ matrix.module }}/build/test-results/test" ]; then
            TOTAL=$(find ${{ matrix.module }}/build/test-results/test -name "*.xml" -exec grep -h "testsuite" {} \; | grep -oP 'tests="\K[0-9]+' | awk '{sum += $1} END {print sum}')
            FAILURES=$(find ${{ matrix.module }}/build/test-results/test -name "*.xml" -exec grep -h "testsuite" {} \; | grep -oP 'failures="\K[0-9]+' | awk '{sum += $1} END {print sum}')
            ERRORS=$(find ${{ matrix.module }}/build/test-results/test -name "*.xml" -exec grep -h "testsuite" {} \; | grep -oP 'errors="\K[0-9]+' | awk '{sum += $1} END {print sum}')

            echo "- **Total Tests**: $TOTAL" >> $GITHUB_STEP_SUMMARY
            echo "- **Failures**: $FAILURES" >> $GITHUB_STEP_SUMMARY
            echo "- **Errors**: $ERRORS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ "$FAILURES" -gt 0 ] || [ "$ERRORS" -gt 0 ]; then
              echo "❌ Tests failed!" >> $GITHUB_STEP_SUMMARY
              exit 1
            else
              echo "✅ All tests passed!" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ No test results found" >> $GITHUB_STEP_SUMMARY
          fi

  coverage:
    name: Coverage Report
    needs: test
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Generate coverage reports
        run: |
          ./gradlew test jacocoTestReport --parallel --build-cache

      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-reports-*
          path: coverage-reports

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: |
            spring-batch-querydsl-kotlin-reader/build/reports/jacoco/test/jacocoTestReport.xml
            spring-batch-querydsl-kotlin-sample/build/reports/jacoco/test/jacocoTestReport.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Generate coverage summary
        run: |
          echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f spring-batch-querydsl-kotlin-reader/build/reports/jacoco/test/html/index.html ]; then
            echo "### Reader Module" >> $GITHUB_STEP_SUMMARY
            echo "Coverage report generated successfully" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f spring-batch-querydsl-kotlin-sample/build/reports/jacoco/test/html/index.html ]; then
            echo "### Sample Module" >> $GITHUB_STEP_SUMMARY
            echo "Coverage report generated successfully" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Parse coverage data
        id: coverage
        run: |
          # Parse reader module coverage
          if [ -f spring-batch-querydsl-kotlin-reader/build/reports/jacoco/test/jacocoTestReport.xml ]; then
            READER_INSTR=$(grep -oP '<counter type="INSTRUCTION" missed="\K[0-9]+' spring-batch-querydsl-kotlin-reader/build/reports/jacoco/test/jacocoTestReport.xml | head -1)
            READER_INSTR_COVERED=$(grep -oP '<counter type="INSTRUCTION" missed="[0-9]+" covered="\K[0-9]+' spring-batch-querydsl-kotlin-reader/build/reports/jacoco/test/jacocoTestReport.xml | head -1)
            READER_BRANCH=$(grep -oP '<counter type="BRANCH" missed="\K[0-9]+' spring-batch-querydsl-kotlin-reader/build/reports/jacoco/test/jacocoTestReport.xml | head -1)
            READER_BRANCH_COVERED=$(grep -oP '<counter type="BRANCH" missed="[0-9]+" covered="\K[0-9]+' spring-batch-querydsl-kotlin-reader/build/reports/jacoco/test/jacocoTestReport.xml | head -1)

            READER_INSTR_TOTAL=$((READER_INSTR + READER_INSTR_COVERED))
            READER_BRANCH_TOTAL=$((READER_BRANCH + READER_BRANCH_COVERED))

            if [ $READER_INSTR_TOTAL -gt 0 ]; then
              READER_INSTR_PCT=$(awk "BEGIN {printf \"%.2f\", ($READER_INSTR_COVERED/$READER_INSTR_TOTAL)*100}")
            else
              READER_INSTR_PCT="0.00"
            fi

            if [ $READER_BRANCH_TOTAL -gt 0 ]; then
              READER_BRANCH_PCT=$(awk "BEGIN {printf \"%.2f\", ($READER_BRANCH_COVERED/$READER_BRANCH_TOTAL)*100}")
            else
              READER_BRANCH_PCT="0.00"
            fi

            echo "reader_instr_pct=$READER_INSTR_PCT" >> $GITHUB_OUTPUT
            echo "reader_branch_pct=$READER_BRANCH_PCT" >> $GITHUB_OUTPUT
            echo "reader_instr_covered=$READER_INSTR_COVERED" >> $GITHUB_OUTPUT
            echo "reader_instr_total=$READER_INSTR_TOTAL" >> $GITHUB_OUTPUT
            echo "reader_branch_covered=$READER_BRANCH_COVERED" >> $GITHUB_OUTPUT
            echo "reader_branch_total=$READER_BRANCH_TOTAL" >> $GITHUB_OUTPUT
          fi

          # Parse sample module coverage
          if [ -f spring-batch-querydsl-kotlin-sample/build/reports/jacoco/test/jacocoTestReport.xml ]; then
            SAMPLE_INSTR=$(grep -oP '<counter type="INSTRUCTION" missed="\K[0-9]+' spring-batch-querydsl-kotlin-sample/build/reports/jacoco/test/jacocoTestReport.xml | head -1)
            SAMPLE_INSTR_COVERED=$(grep -oP '<counter type="INSTRUCTION" missed="[0-9]+" covered="\K[0-9]+' spring-batch-querydsl-kotlin-sample/build/reports/jacoco/test/jacocoTestReport.xml | head -1)
            SAMPLE_BRANCH=$(grep -oP '<counter type="BRANCH" missed="\K[0-9]+' spring-batch-querydsl-kotlin-sample/build/reports/jacoco/test/jacocoTestReport.xml | head -1)
            SAMPLE_BRANCH_COVERED=$(grep -oP '<counter type="BRANCH" missed="[0-9]+" covered="\K[0-9]+' spring-batch-querydsl-kotlin-sample/build/reports/jacoco/test/jacocoTestReport.xml | head -1)

            SAMPLE_INSTR_TOTAL=$((SAMPLE_INSTR + SAMPLE_INSTR_COVERED))
            SAMPLE_BRANCH_TOTAL=$((SAMPLE_BRANCH + SAMPLE_BRANCH_COVERED))

            if [ $SAMPLE_INSTR_TOTAL -gt 0 ]; then
              SAMPLE_INSTR_PCT=$(awk "BEGIN {printf \"%.2f\", ($SAMPLE_INSTR_COVERED/$SAMPLE_INSTR_TOTAL)*100}")
            else
              SAMPLE_INSTR_PCT="0.00"
            fi

            if [ $SAMPLE_BRANCH_TOTAL -gt 0 ]; then
              SAMPLE_BRANCH_PCT=$(awk "BEGIN {printf \"%.2f\", ($SAMPLE_BRANCH_COVERED/$SAMPLE_BRANCH_TOTAL)*100}")
            else
              SAMPLE_BRANCH_PCT="0.00"
            fi

            echo "sample_instr_pct=$SAMPLE_INSTR_PCT" >> $GITHUB_OUTPUT
            echo "sample_branch_pct=$SAMPLE_BRANCH_PCT" >> $GITHUB_OUTPUT
            echo "sample_instr_covered=$SAMPLE_INSTR_COVERED" >> $GITHUB_OUTPUT
            echo "sample_instr_total=$SAMPLE_INSTR_TOTAL" >> $GITHUB_OUTPUT
            echo "sample_branch_covered=$SAMPLE_BRANCH_COVERED" >> $GITHUB_OUTPUT
            echo "sample_branch_total=$SAMPLE_BRANCH_TOTAL" >> $GITHUB_OUTPUT
          fi

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const readerInstrPct = '${{ steps.coverage.outputs.reader_instr_pct }}';
            const readerBranchPct = '${{ steps.coverage.outputs.reader_branch_pct }}';
            const readerInstrCovered = '${{ steps.coverage.outputs.reader_instr_covered }}';
            const readerInstrTotal = '${{ steps.coverage.outputs.reader_instr_total }}';
            const readerBranchCovered = '${{ steps.coverage.outputs.reader_branch_covered }}';
            const readerBranchTotal = '${{ steps.coverage.outputs.reader_branch_total }}';

            const sampleInstrPct = '${{ steps.coverage.outputs.sample_instr_pct }}';
            const sampleBranchPct = '${{ steps.coverage.outputs.sample_branch_pct }}';
            const sampleInstrCovered = '${{ steps.coverage.outputs.sample_instr_covered }}';
            const sampleInstrTotal = '${{ steps.coverage.outputs.sample_instr_total }}';
            const sampleBranchCovered = '${{ steps.coverage.outputs.sample_branch_covered }}';
            const sampleBranchTotal = '${{ steps.coverage.outputs.sample_branch_total }}';

            const getStatusEmoji = (pct) => {
              const num = parseFloat(pct);
              if (num >= 90) return '🟢';
              if (num >= 70) return '🟡';
              return '🔴';
            };

            const body = `## 📊 Test Coverage Report

### Reader Module
| Type | Coverage | Details |
|------|----------|---------|
| ${getStatusEmoji(readerInstrPct)} **Instruction** | **${readerInstrPct}%** | ${readerInstrCovered}/${readerInstrTotal} |
| ${getStatusEmoji(readerBranchPct)} **Branch** | **${readerBranchPct}%** | ${readerBranchCovered}/${readerBranchTotal} |

### Sample Module
| Type | Coverage | Details |
|------|----------|---------|
| ${getStatusEmoji(sampleInstrPct)} **Instruction** | **${sampleInstrPct}%** | ${sampleInstrCovered}/${sampleInstrTotal} |
| ${getStatusEmoji(sampleBranchPct)} **Branch** | **${sampleBranchPct}%** | ${sampleBranchCovered}/${sampleBranchTotal} |

---
Coverage legend: 🟢 ≥90% | 🟡 70-89% | 🔴 <70%

<sub>Generated by [JaCoCo](https://www.jacoco.org/jacoco/)</sub>`;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('📊 Test Coverage Report')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  build:
    name: Build Project
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test --parallel --build-cache

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            spring-batch-querydsl-kotlin-reader/build/libs/
            spring-batch-querydsl-kotlin-sample/build/libs/
          retention-days: 7

  status-check:
    name: Status Check
    needs: [test, coverage, build]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "Tests failed!"
            exit 1
          fi
          echo "All tests passed!"

      - name: Check build results
        run: |
          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "Build failed!"
            exit 1
          fi
          echo "Build succeeded!"

      - name: Report status
        run: |
          echo "## CI Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage: ${{ needs.coverage.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
